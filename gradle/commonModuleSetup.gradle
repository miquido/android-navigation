plugins.withId("java-library") {
    setupJava()
}
plugins.withId("com.android.application") {
    setupAndroid(true)
    setupKsp(android.applicationVariants)
}
plugins.withId("com.android.library") {
    setupAndroid(false)
    setupKsp(android.libraryVariants)
}

def setupJava() {
    kotlin {
        jvmToolchain {
            languageVersion.set(JavaLanguageVersion.of(11))
        }
    }
    compileKotlin.kotlinOptions.freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
    compileTestKotlin.kotlinOptions.freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"

    test {
        maxParallelForks = Runtime.runtime.availableProcessors() - 1
        maxHeapSize = "256m"
    }
}

def setupAndroid(isApp) {
    android {
        compileSdk projectCompileSdk

        defaultConfig {
            minSdk projectMinSdk
            targetSdk projectTargetSdk
        }

        if (!isApp) {
            buildTypes.release.minifyEnabled false
        }

        lintOptions {
            checkDependencies true
            checkReleaseBuilds false
            ignoreTestSources true
            warningsAsErrors true
            disable = [
                    "GoogleAppIndexingWarning",
                    "GradleDependency",
                    "JavaPluginLanguageLevel",
                    "EnsureInitializerMetadata"
            ]
        }

        testOptions {
            unitTests.all {
                maxParallelForks = Runtime.runtime.availableProcessors() - 1
            }
        }
    }

    plugins.withId("org.jetbrains.kotlin.android") {
        kotlin {
            jvmToolchain {
                languageVersion.set(JavaLanguageVersion.of(11))
            }
        }

        android.kotlinOptions.freeCompilerArgs += [
                "-opt-in=kotlin.RequiresOptIn"
        ]
    }
}

// https://github.com/google/ksp/issues/746
def setupKsp(androidVariants) {
    plugins.withId("com.google.devtools.ksp") {
        setupKspSourceSets(androidVariants)
    }
}

def setupKspSourceSets(variants) {
    variants.all { variant ->
        def name = variant.name
        kotlin.sourceSets {
            getByName(name) {
                kotlin.srcDirs += ["$layout.buildDirectory/generated/ksp/$name/kotlin"]
            }
        }
    }
}
